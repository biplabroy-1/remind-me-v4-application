name: Deploy APKs and Create Releases

on:
  push:
    paths:
      - 'build/**'

permissions:
  contents: write

jobs:
  build: 
    runs-on: ubuntu-latest 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Read version from app.json
        id: version
        run: |
          echo "VERSION=$(node -p "require('./app.json').expo.version")" >> $GITHUB_ENV

      - name: Create Release Folder
        run: mkdir -p release

      - name: Create GitHub Releases and Upload APKs
        id: create_releases
        run: |
          ABIS=("armeabi-v7a" "arm64-v8a")
          for ABI in "${ABIS[@]}"; do
            APK_PATH="build/app-${ABI}-release.apk"
            if [ -f "$APK_PATH" ]; then
              release_name="Release v${{ env.VERSION }} - $ABI"
              tag_name="v${{ env.VERSION }}-$ABI"
              echo "Creating release: $release_name"
              RESPONSE=$(curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/releases" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -d "{\"tag_name\": \"$tag_name\", \"name\": \"$release_name\", \"body\": \"APK for version ${{ env.VERSION }} - ABI $ABI has been released.\"}")

              upload_url=$(echo $RESPONSE | jq -r .upload_url | sed "s/{.*}//")

              echo "Uploading APK: $APK_PATH"
              curl -s -X POST "$upload_url?name=app-${ABI}-v${{ env.VERSION }}.apk" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Content-Type: application/vnd.android.package-archive" \
                --data-binary @"$APK_PATH"
            else
              echo "APK for ABI $ABI not found at $APK_PATH"
            fi
          done

      - name: Create version.json
        run: |
          echo '{ "version": "'${{ env.VERSION }}'", "apks": [' > release/version.json
          ABIS=("armeabi-v7a" "arm64-v8a")
          for ABI in "${ABIS[@]}"; do
            APK_URL="https://github.com/${{ github.repository }}/releases/download/v${{ env.VERSION }}-${ABI}/app-${ABI}-v${{ env.VERSION }}.apk"
            echo '  {"abi": "'$ABI'", "url": "'$APK_URL'"},' >> release/version.json
          done
          sed -i '$ s/,$//' release/version.json
          echo ']}' >> release/version.json

      - name: Create a .nojekyll file
        run: echo > release/.nojekyll  # Ensure GitHub Pages skips Jekyll processing

      - name: List working directory contents
        run: ls -R  # Check contents of the working directory

      - name: Check version.json contents
        run: cat release/version.json  # Ensure version.json was created successfully

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }} 
          publish_dir: release
